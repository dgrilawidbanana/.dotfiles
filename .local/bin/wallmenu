#!/usr/bin/env python3
import random
import subprocess
from pathlib import Path


CONFIG_PATH = Path.home() / ".config"
WALLPAPER_PATH = Path.home() / "Pictures/wallpapers"


def menu(options):
	menu = subprocess.run(
		["tofi", "--prompt-text", "wallpaper: "],
		input="\n".join(options),
		text=True,
		capture_output=True,
	)
	return menu.stdout.strip() or None


def get_wallpapers():
	current_wallpaper = (
		subprocess.run(["swww", "query"], capture_output=True, text=True)
		.stdout.strip()
		.split("/")[-1]
	)

	wallpapers = {}
	for theme in ("dark", "light"):
		wallpapers[theme] = [
			file.name
			for file in (WALLPAPER_PATH / theme).iterdir()
			if file.name != current_wallpaper
		]
	return wallpapers


def pick_wallpaper(wallpapers):
	options = [
		"random",
		"random dark",
		"random light",
		*wallpapers["dark"],
		*wallpapers["light"],
	]

	choice = menu(options)
	if not choice:
		return None, None

	if choice == "random":
		theme = random.choice(list(wallpapers.keys()))
		return random.choice(wallpapers[theme]), theme
	if choice == "random dark":
		return random.choice(wallpapers["dark"]), "dark"
	if choice == "random light":
		return random.choice(wallpapers["light"]), "light"

	for theme, files in wallpapers.items():
		if choice in files:
			return choice, theme

	return None, None


def set_wallpaper(wallpaper, theme):
	subprocess.run(
		["swww", "img", WALLPAPER_PATH / theme / wallpaper, "--transition-type", "any"]
	)


def update_system_theme(theme):
	subprocess.run(
		[
			"gsettings",
			"set",
			"org.gnome.desktop.interface",
			"color-scheme",
			f"prefer-{theme}",
		]
	)
	subprocess.run(
		[
			"gsettings",
			"set",
			"org.gnome.desktop.interface",
			"gtk-theme",
			"Adwaita" if theme == "dark" else "Default",
		]
	)


def update_app_theme(app, theme, extension=""):
	source = f"{theme}-colors{extension}"
	destination = CONFIG_PATH / f"{app}/theme-colors{extension}"
	if destination.exists():
		destination.unlink()
	destination.symlink_to(source)


def update_mako_theme(theme):
	update_app_theme("mako", theme)
	subprocess.run(["makoctl", "reload"])


def update_tofi_theme(theme):
	update_app_theme("tofi", theme)


def update_waybar_theme():
	subprocess.run(["pkill", "waybar"])
	subprocess.Popen(["waybar"], start_new_session=True)


def main():
	wallpapers = get_wallpapers()
	wallpaper, theme = pick_wallpaper(wallpapers)
	if not wallpaper:
		return

	set_wallpaper(wallpaper, theme)
	if (
		theme
		not in subprocess.run(
			["gsettings", "get", "org.gnome.desktop.interface", "color-scheme"],
			capture_output=True,
			text=True,
		).stdout
	):
		update_system_theme(theme)
		update_waybar_theme()
		update_mako_theme(theme)
		update_tofi_theme(theme)


if __name__ == "__main__":
	main()
